rules:
  - **语言与框架**
    - 默认使用 **TypeScript**，除非用户指定 JS
    - React 使用函数式组件 + Hooks，Vue 使用 Composition API + <script setup>
    - 状态管理：React -> Redux Toolkit / Zustand；Vue -> Pinia

  - **代码风格**
    - 使用 ESLint + Prettier 统一规范
    - 严格遵循 Airbnb 或团队约定的风格
    - 所有函数和组件必须有明确的类型声明，不允许 any
    - 避免魔法数和硬编码，使用常量或配置文件

  - **组件规范**
    - 组件必须具备 **清晰的 props 定义**（类型 + 注释）
    - UI 层优先使用 **TailwindCSS**，复用场景下可以抽象成 UI 组件库
    - 严禁写内联样式，除非动态场景无法避免
    - 组件应 **高内聚，低耦合**，避免逻辑散落
    - 列表渲染必须有稳定 key，不得使用 index

  - **业务逻辑**
    - 数据请求必须封装在 `services/api.ts` 或 `src/api/` 模块
    - API 调用必须使用 async/await，并处理错误和异常
    - 全局错误处理与 Toast/Message 提示统一封装
    - 表单、搜索框等输入需有 **防抖/节流**，默认防抖 300-500ms
    - 禁止直接操作 DOM，应使用 ref 或框架内置机制

  - **性能与优化**
    - 避免不必要的 re-render，React 必须考虑 `memo`、`useCallback`、`useMemo`
    - 长列表需考虑虚拟化（react-window / vue-virtual-scroller）
    - 网络请求需缓存/去重，使用 SWR/React Query/Vue Query 等方案
    - 考虑懒加载和代码分割（dynamic import）

  - **架构与目录**
    - 按照 `src/` 下分层：
      - `components/` → 通用组件
      - `pages/` → 页面级组件
      - `api/` → API 封装
      - `store/` → 状态管理
      - `hooks/` → 自定义 Hooks
      - `utils/` → 工具函数
      - `types/` → 类型声明
    - 严禁将业务逻辑与 UI 混写

  - **文档与注释**
    - 关键函数/模块必须有注释，说明输入、输出、边界情况
    - 公共函数、Hooks 必须写 JSDoc 格式注释
    - 文件头部写清楚模块职责

  - **测试**
    - 单元测试使用 Jest/RTL 或 Vitest
    - 关键逻辑必须覆盖单元测试
    - 组件需有至少基础的渲染快照测试

  - **默认输出**
    - 如果用户未指定框架，则默认生成 **React + TypeScript + Tailwind + Redux Toolkit**
    - 默认生成代码必须是 **可直接运行的完整片段**（含 import）
    - 必须保证 **可维护性、扩展性、健壮性**
  -**页面风格**
	--色彩风格:避免默认的蓝紫渐变，改为简洁的[主色调，例如蓝+灰、黑+白、绿色系]，减少过度渐变，优先使用纯色或轻微渐变。 
	-组件样式:避免使用夸张的大圆角和过大字号，按钮和卡片圆角控制在4px-8px,字体保持层级感但不过度夸张。 -图标表现:避免使用emoji作为icon，统一替换为简洁、 线性风格的矢量图标。 
	-阴影与层次:减少浓重投影，使用轻量柔和阴影或边框分隔，保证页面轻盈、清爽。  
	-保持功能不变，只调整视觉风格。
